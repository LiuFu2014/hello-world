//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFTest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class XinYaDBEntities : DbContext
    {
        public XinYaDBEntities()
            : base("name=XinYaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TB_CommonTypeConfigM> TB_CommonTypeConfigM { get; set; }
        public virtual DbSet<TB_CommonTypeConfigS> TB_CommonTypeConfigS { get; set; }
        public virtual DbSet<TB_Components> TB_Components { get; set; }
        public virtual DbSet<TB_Exception> TB_Exception { get; set; }
        public virtual DbSet<TB_Fenleibianma> TB_Fenleibianma { get; set; }
        public virtual DbSet<TB_KeyComponentsInfo> TB_KeyComponentsInfo { get; set; }
        public virtual DbSet<TB_LEDText> TB_LEDText { get; set; }
        public virtual DbSet<TB_LoginRecord> TB_LoginRecord { get; set; }
        public virtual DbSet<TB_MatCodeKeyComLink> TB_MatCodeKeyComLink { get; set; }
        public virtual DbSet<TB_MatComSuplConn> TB_MatComSuplConn { get; set; }
        public virtual DbSet<TB_MaterialInfo> TB_MaterialInfo { get; set; }
        public virtual DbSet<TB_MonthPlanForLED> TB_MonthPlanForLED { get; set; }
        public virtual DbSet<TB_PalletInfo> TB_PalletInfo { get; set; }
        public virtual DbSet<TB_PLCAdressWithStopper> TB_PLCAdressWithStopper { get; set; }
        public virtual DbSet<TB_PLCAdressWithWorkStationInfo> TB_PLCAdressWithWorkStationInfo { get; set; }
        public virtual DbSet<TB_PLCBaseAdressInfo> TB_PLCBaseAdressInfo { get; set; }
        public virtual DbSet<TB_ProcessRouteM> TB_ProcessRouteM { get; set; }
        public virtual DbSet<TB_ProcessRouteP> TB_ProcessRouteP { get; set; }
        public virtual DbSet<TB_ProductionPlan> TB_ProductionPlan { get; set; }
        public virtual DbSet<TB_ProductionPlanFromERP> TB_ProductionPlanFromERP { get; set; }
        public virtual DbSet<TB_QCRecord> TB_QCRecord { get; set; }
        public virtual DbSet<TB_RepairRecord> TB_RepairRecord { get; set; }
        public virtual DbSet<TB_ScanRecord> TB_ScanRecord { get; set; }
        public virtual DbSet<TB_SecondWorkStationInfo> TB_SecondWorkStationInfo { get; set; }
        public virtual DbSet<TB_Supplier> TB_Supplier { get; set; }
        public virtual DbSet<TB_SystemLog> TB_SystemLog { get; set; }
        public virtual DbSet<TB_User> TB_User { get; set; }
        public virtual DbSet<TB_UserLoginRight> TB_UserLoginRight { get; set; }
        public virtual DbSet<TB_WorkClasses> TB_WorkClasses { get; set; }
        public virtual DbSet<TB_WorkDtl> TB_WorkDtl { get; set; }
        public virtual DbSet<TB_WorkDtlForEachStation> TB_WorkDtlForEachStation { get; set; }
        public virtual DbSet<TB_WorkException> TB_WorkException { get; set; }
        public virtual DbSet<TB_WorkMain> TB_WorkMain { get; set; }
        public virtual DbSet<TB_WorkStationInfo> TB_WorkStationInfo { get; set; }
        public virtual DbSet<TB_WorkTime> TB_WorkTime { get; set; }
        public virtual DbSet<TB_WorkTimeBandingInfo> TB_WorkTimeBandingInfo { get; set; }
        public virtual DbSet<TB_WorkTimeM> TB_WorkTimeM { get; set; }
        public virtual DbSet<TB_WorkTimeS> TB_WorkTimeS { get; set; }
    
        public virtual int pro_UpdateTB_PLCBaseAdressInfo(Nullable<int> iD, Nullable<int> data)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dataParameter = data.HasValue ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pro_UpdateTB_PLCBaseAdressInfo", iDParameter, dataParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
